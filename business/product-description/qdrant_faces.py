# ==================================================
# –ë–õ–û–ö 1: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
# ==================================================

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
!pip install mediapipe torch torchvision opencv-python pillow qdrant-client

import cv2
import numpy as np
import mediapipe as mp
import torch
import torch.nn as nn
import torchvision.transforms as transforms
from torchvision.models import resnet50
from PIL import Image
import base64
from io import BytesIO
import uuid
from datetime import datetime
import os
import glob
from qdrant_client import QdrantClient
from qdrant_client.models import PointStruct, Distance, VectorParams

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MediaPipe
mp_face_mesh = mp.solutions.face_mesh
mp_drawing = mp.solutions.drawing_utils
mp_drawing_styles = mp.solutions.drawing_styles

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ ResNet
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—É—é ResNet-50
resnet_model = resnet50(pretrained=True)
# –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º feature extractor
resnet_model = nn.Sequential(*list(resnet_model.children())[:-1])
resnet_model.eval()
resnet_model = resnet_model.to(device)

# –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è ResNet
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406],
                       std=[0.229, 0.224, 0.225])
])

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Qdrant –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
qdrant_client = QdrantClient(location=":memory:")

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –≥—É–±
collection_name = "lips_vectors"
vector_size = 2048  # –†–∞–∑–º–µ—Ä –≤–µ–∫—Ç–æ—Ä–∞ ResNet-50

try:
    qdrant_client.create_collection(
        collection_name=collection_name,
        vectors_config=VectorParams(
            size=vector_size,
            distance=Distance.COSINE
        )
    )
    print(f"‚úì –ö–æ–ª–ª–µ–∫—Ü–∏—è '{collection_name}' —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    print(f"‚ö†Ô∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {e}")

# –ò–Ω–¥–µ–∫—Å—ã —Ç–æ—á–µ–∫ –≥—É–± –≤ MediaPipe Face Mesh
LIPS_INDICES = [
    # –í–Ω–µ—à–Ω–∏–π –∫–æ–Ω—Ç—É—Ä –≥—É–±
    61, 84, 17, 314, 405, 320, 307, 375, 321, 308, 324, 318,
    # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–Ω—Ç—É—Ä –≥—É–±
    78, 95, 88, 178, 87, 14, 317, 402, 318, 324, 308, 415,
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è
    13, 82, 81, 80, 78, 191, 80, 81, 82, 13, 312, 311, 310, 415
]

def extract_lips_vector(image_path):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–µ–∫—Ç–æ—Ä –≥—É–± –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    Args:
        image_path (str): –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é

    Returns:
        dict: {
            'success': bool,
            'vector': list,
            'lips_image_b64': str,
            'landmarks': list,
            'error': str
        }
    """

    try:
        # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image = cv2.imread(image_path)
        if image is None:
            return {
                'success': False,
                'vector': None,
                'lips_image_b64': None,
                'landmarks': None,
                'error': f'–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}'
            }

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º BGR –≤ RGB –¥–ª—è MediaPipe
        rgb_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        height, width = rgb_image.shape[:2]

        # 2. –î–µ—Ç–µ–∫—Ü–∏—è –ª–∏—Ü–∞ –∏ –∫–ª—é—á–µ–≤—ã—Ö —Ç–æ—á–µ–∫
        with mp_face_mesh.FaceMesh(
            static_image_mode=True,
            max_num_faces=1,
            refine_landmarks=True,
            min_detection_confidence=0.5
        ) as face_mesh:

            results = face_mesh.process(rgb_image)

            if not results.multi_face_landmarks:
                return {
                    'success': False,
                    'vector': None,
                    'lips_image_b64': None,
                    'landmarks': None,
                    'error': '–õ–∏—Ü–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏'
                }

            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ
            face_landmarks = results.multi_face_landmarks[0]

            # 3. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≥—É–±
            lips_points = []
            for idx in LIPS_INDICES:
                if idx < len(face_landmarks.landmark):
                    landmark = face_landmarks.landmark[idx]
                    x = int(landmark.x * width)
                    y = int(landmark.y * height)
                    lips_points.append([x, y])

            if not lips_points:
                return {
                    'success': False,
                    'vector': None,
                    'lips_image_b64': None,
                    'landmarks': None,
                    'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–æ—á–∫–∏ –≥—É–±'
                }

            # 4. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –≥—É–±
            lips_points = np.array(lips_points)
            x_min, y_min = np.min(lips_points, axis=0)
            x_max, y_max = np.max(lips_points, axis=0)

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã (20% –æ—Ç —Ä–∞–∑–º–µ—Ä–∞)
            margin_x = int((x_max - x_min) * 0.2)
            margin_y = int((y_max - y_min) * 0.2)

            x_min = max(0, x_min - margin_x)
            y_min = max(0, y_min - margin_y)
            x_max = min(width, x_max + margin_x)
            y_max = min(height, y_max + margin_y)

            # 5. –û–±—Ä–µ–∑–∫–∞ –æ–±–ª–∞—Å—Ç–∏ –≥—É–±
            lips_region = rgb_image[y_min:y_max, x_min:x_max]

            if lips_region.size == 0:
                return {
                    'success': False,
                    'vector': None,
                    'lips_image_b64': None,
                    'landmarks': None,
                    'error': '–ü—É—Å—Ç–∞—è –æ–±–ª–∞—Å—Ç—å –≥—É–±'
                }

            # 6. –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ PIL –¥–ª—è ResNet
            lips_pil = Image.fromarray(lips_region)
            lips_tensor = transform(lips_pil).unsqueeze(0).to(device)

            # 7. –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ ResNet
            with torch.no_grad():
                features = resnet_model(lips_tensor)
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–¥–Ω–æ–º–µ—Ä–Ω—ã–π –≤–µ–∫—Ç–æ—Ä
                vector = features.squeeze().cpu().numpy().flatten().tolist()

            # 8. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—É–± –≤ base64
            lips_pil_resized = lips_pil.resize((100, 100))  # –ú–∏–Ω–∏–∞—Ç—é—Ä–∞
            buffer = BytesIO()
            lips_pil_resized.save(buffer, format='JPEG')
            lips_image_b64 = base64.b64encode(buffer.getvalue()).decode()

            # 9. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ landmarks –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            landmarks_normalized = []
            for point in lips_points:
                landmarks_normalized.append([
                    float(point[0] - x_min) / (x_max - x_min),  # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è x
                    float(point[1] - y_min) / (y_max - y_min)   # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è y
                ])

            return {
                'success': True,
                'vector': vector,
                'lips_image_b64': lips_image_b64,
                'landmarks': landmarks_normalized,
                'error': None,
                'lips_bbox': [int(x_min), int(y_min), int(x_max), int(y_max)],
                'vector_size': len(vector)
            }

    except Exception as e:
        return {
            'success': False,
            'vector': None,
            'lips_image_b64': None,
            'landmarks': None,
            'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}'
        }

def clear_collection():
    """
    –û—á–∏—â–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é –≥—É–± –≤ Qdrant

    Returns:
        dict: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        collection_info = qdrant_client.get_collection(collection_name)
        points_count = collection_info.points_count

        if points_count == 0:
            print("‚úì –ö–æ–ª–ª–µ–∫—Ü–∏—è —É–∂–µ –ø—É—Å—Ç–∞")
            return {'success': True, 'deleted_count': 0}

        # –£–¥–∞–ª—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
        qdrant_client.delete_collection(collection_name)

        # –°–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ
        qdrant_client.create_collection(
            collection_name=collection_name,
            vectors_config=VectorParams(
                size=vector_size,
                distance=Distance.COSINE
            )
        )

        print(f"‚úì –ö–æ–ª–ª–µ–∫—Ü–∏—è –æ—á–∏—â–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ {points_count} —Ç–æ—á–µ–∫")
        return {'success': True, 'deleted_count': points_count}

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {str(e)}")
        return {'success': False, 'error': str(e)}

def load_base_lips_to_qdrant(base_dir="/content/base_lips"):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ base_lips –≤ Qdrant

    Args:
        base_dir (str): –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –±–∞–∑–æ–≤—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –≥—É–±

    Returns:
        dict: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    """

    start_time = datetime.now()
    print(f"üîÑ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ {base_dir}...")
    print(f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {start_time.strftime('%H:%M:%S')}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not os.path.exists(base_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {base_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return {'success': False, 'error': f'–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {base_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}

    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    image_extensions = ['*.jpg', '*.jpeg', '*.png', '*.bmp', '*.tiff', '*.webp']
    image_files = []

    for ext in image_extensions:
        image_files.extend(glob.glob(os.path.join(base_dir, ext)))
        image_files.extend(glob.glob(os.path.join(base_dir, ext.upper())))

    if not image_files:
        print(f"‚ùå –í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {base_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        return {'success': False, 'error': '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}

    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

    successful_uploads = 0
    failed_uploads = 0
    upload_results = []

    for i, image_path in enumerate(image_files, 1):
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        filename = os.path.basename(image_path)
        name_without_ext = os.path.splitext(filename)[0]

        print(f"üîÑ [{i}/{len(image_files)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {filename}")

        # –í–µ–∫—Ç–æ—Ä–∏–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        lips_data = extract_lips_vector(image_path)

        if lips_data['success']:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º payload –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Qdrant
            point_id = str(uuid.uuid4())

            payload = {
                'name': name_without_ext,
                'filename': filename,
                'source_path': image_path,
                'lips_image_b64': lips_data['lips_image_b64'],
                'landmarks': lips_data['landmarks'],
                'lips_bbox': [int(coord) for coord in lips_data.get('lips_bbox', [])],
                'vector_size': int(lips_data['vector_size']),
                'upload_date': datetime.now().isoformat()
            }

            # –°–æ–∑–¥–∞–µ–º —Ç–æ—á–∫—É –¥–ª—è Qdrant
            point = PointStruct(
                id=point_id,
                vector=lips_data['vector'],
                payload=payload
            )

            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ—á–∫—É
                operation_info = qdrant_client.upsert(
                    collection_name=collection_name,
                    points=[point]
                )

                successful_uploads += 1
                print(f"   ‚úì –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ (ID: {point_id[:8]}...)")
                upload_results.append({
                    'filename': filename,
                    'name': name_without_ext,
                    'point_id': point_id,
                    'status': 'success'
                })

            except Exception as e:
                failed_uploads += 1
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
                upload_results.append({
                    'filename': filename,
                    'name': name_without_ext,
                    'error': str(e),
                    'status': 'failed'
                })
        else:
            failed_uploads += 1
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {lips_data['error']}")
            upload_results.append({
                'filename': filename,
                'name': name_without_ext,
                'error': lips_data['error'],
                'status': 'failed'
            })

    end_time = datetime.now()
    duration = end_time - start_time

    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:")
    print(f"   ‚úì –£—Å–ø–µ—à–Ω–æ: {successful_uploads}")
    print(f"   ‚ùå –û—à–∏–±–æ–∫: {failed_uploads}")
    print(f"   üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(image_files)}")
    print(f"   ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration}")
    print(f"   üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: {len(image_files)/duration.total_seconds():.2f} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π/—Å–µ–∫")

    return {
        'success': True,
        'total_files': len(image_files),
        'successful_uploads': successful_uploads,
        'failed_uploads': failed_uploads,
        'upload_results': upload_results,
        'duration': duration,
        'speed': len(image_files)/duration.total_seconds()
    }

def search_from_test_directory(test_dir="/content/test_lips", top_k=5, threshold=0.3):
    """
    –ò—â–µ—Ç –ø–æ—Ö–æ–∂–∏–µ –≥—É–±—ã –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏

    Args:
        test_dir (str): –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ç–µ—Å—Ç–æ–≤—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        top_k (int): –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        threshold (float): –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏

    Returns:
        dict: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    """

    start_time = datetime.now()
    print(f"üîç –ü–æ–∏—Å–∫ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {test_dir}...")
    print(f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {start_time.strftime('%H:%M:%S')}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not os.path.exists(test_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {test_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return {'success': False, 'error': f'–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {test_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}

    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    image_extensions = ['*.jpg', '*.jpeg', '*.png', '*.bmp', '*.tiff', '*.webp']
    image_files = []

    for ext in image_extensions:
        image_files.extend(glob.glob(os.path.join(test_dir, ext)))
        image_files.extend(glob.glob(os.path.join(test_dir, ext.upper())))

    if not image_files:
        print(f"‚ùå –í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {test_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        return {'success': False, 'error': '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}

    if len(image_files) != 1:
        print(f"‚ùå –í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {test_dir} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–π–ª, –Ω–∞–π–¥–µ–Ω–æ: {len(image_files)}")
        print("–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        for f in image_files:
            print(f"   - {os.path.basename(f)}")
        return {'success': False, 'error': f'–ù–∞–π–¥–µ–Ω–æ {len(image_files)} —Ñ–∞–π–ª–æ–≤, –æ–∂–∏–¥–∞–ª—Å—è 1'}

    test_image_path = image_files[0]
    test_filename = os.path.basename(test_image_path)

    print(f"üì∏ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {test_filename}")

    # –í–µ–∫—Ç–æ—Ä–∏–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    vectorization_start = datetime.now()
    query_lips_data = extract_lips_vector(test_image_path)
    vectorization_time = datetime.now() - vectorization_start

    if not query_lips_data['success']:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {query_lips_data['error']}")
        return {
            'success': False,
            'error': f'–í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {query_lips_data["error"]}',
            'test_filename': test_filename
        }

    print(f"‚úì –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ –∑–∞ {vectorization_time}")
    print(f"üìê –†–∞–∑–º–µ—Ä –≤–µ–∫—Ç–æ—Ä–∞: {query_lips_data['vector_size']}")

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –≤ Qdrant
    search_start = datetime.now()

    try:
        search_results = qdrant_client.search(
            collection_name=collection_name,
            query_vector=query_lips_data['vector'],
            limit=top_k,
            score_threshold=threshold,
            with_payload=True,
            with_vectors=False
        )

        search_time = datetime.now() - search_start

        results = []

        if not search_results:
            print("‚ùå –ü–æ—Ö–æ–∂–∏–µ –≥—É–±—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            print(f"‚úì –ù–∞–π–¥–µ–Ω–æ {len(search_results)} –ø–æ—Ö–æ–∂–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:\n")

            for i, result in enumerate(search_results, 1):
                result_dict = {
                    'rank': i,
                    'id': result.id,
                    'score': result.score,
                    'payload': result.payload,
                    'lips_image_b64': result.payload.get('lips_image_b64', ''),
                    'landmarks': result.payload.get('landmarks', [])
                }

                results.append(result_dict)

                print(f"{i}. ID: {result.id}")
                print(f"   –°—Ö–æ–∂–µ—Å—Ç—å: {result.score:.4f}")
                print(f"   –ò–º—è —Ñ–∞–π–ª–∞: {result.payload.get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
                print(f"   –î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {result.payload.get('upload_date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                print()

        end_time = datetime.now()
        total_time = end_time - start_time

        print(f"\n‚è±Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   üß† –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {vectorization_time}")
        print(f"   üîç –ü–æ–∏—Å–∫: {search_time}")
        print(f"   ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time}")

        return {
            'success': True,
            'test_filename': test_filename,
            'test_image_path': test_image_path,
            'query_lips_data': query_lips_data,
            'search_results': results,
            'total_found': len(results),
            'vectorization_time': vectorization_time,
            'search_time': search_time,
            'total_time': total_time
        }

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")
        return {
            'success': False,
            'error': f'–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}',
            'test_filename': test_filename
        }

def get_collection_info():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏

    Returns:
        dict: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    """
    try:
        collection_info = qdrant_client.get_collection(collection_name)

        info = {
            'name': collection_name,
            'points_count': collection_info.points_count,
            'vector_size': collection_info.config.params.vectors.size,
            'distance': collection_info.config.params.vectors.distance,
            'status': collection_info.status
        }

        print(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ '{collection_name}':")
        print(f"   üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫: {info['points_count']}")
        print(f"   üìê –†–∞–∑–º–µ—Ä –≤–µ–∫—Ç–æ—Ä–∞: {info['vector_size']}")
        print(f"   üìè –ú–µ—Ç—Ä–∏–∫–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è: {info['distance']}")
        print(f"   üü¢ –°—Ç–∞—Ç—É—Å: {info['status']}")

        return info

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}")
        return {'error': str(e)}

print("üéØ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
print(f"üìä –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
print(f"üóÑÔ∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è: {collection_name}")
print(f"üìê –†–∞–∑–º–µ—Ä –≤–µ–∫—Ç–æ—Ä–∞: {vector_size}")
print("\nüõ†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
print("   - clear_collection() - –æ—á–∏—Å—Ç–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
print("   - load_base_lips_to_qdrant() - –∑–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
print("   - search_from_test_directory() - –ø–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –≥—É–±")
print("   - get_collection_info() - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏")